CREATE KEYSPACE vrcard WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};

USE vrcard;

CREATE TABLE grouped_entrances_by_card (
	card_serial Text,
	entrances map<Timestamp, Text>,
	PRIMARY KEY (card_serial));
	
COPY grouped_entrances_by_card (card_serial,entrances)
FROM 'dati_2020 by user grouped.csv'
WITH HEADER = true and DELIMITER='|';

COPY grouped_entrances_by_card (card_serial,entrances)
FROM 'dati_2019 by user grouped.csv'
WITH HEADER = true and DELIMITER='|';

COPY grouped_entrances_by_card (card_serial,entrances)
FROM 'dati_2018 by user grouped.csv'
WITH HEADER = true and DELIMITER='|';

COPY grouped_entrances_by_card (card_serial,entrances)
FROM 'dati_2017 by user grouped.csv'
WITH HEADER = true and DELIMITER='|';

COPY grouped_entrances_by_card (card_serial,entrances)
FROM 'dati_2016 by user grouped.csv'
WITH HEADER = true and DELIMITER='|';

COPY grouped_entrances_by_card (card_serial,entrances)
FROM 'dati_2015 by user grouped.csv'
WITH HEADER = true and DELIMITER='|';

COPY grouped_entrances_by_card (card_serial,entrances)
FROM 'dati_2014 by user grouped.csv'
WITH HEADER = true and DELIMITER='|';

CREATE OR REPLACE FUNCTION vrcard.computeStay (entrances map<Timestamp, Text>) 
CALLED ON NULL INPUT 
RETURNS map<Text, bigint>
LANGUAGE java AS 
$$ 
	String prova = "";
	int i = 0;
	String poi1 = "";
	Date entrance1 = new Date();
	Map<String, Long> timesMap = new TreeMap<String, Long>();
	
	int[][] seconds_distance_matrix = 
	{
    {	0,	    180,	480,	60,	    540,	60,	    600,	60,	    60,	    600,	840,	600,	780,	780,	360,	360,	180,	180,	600,	660,	0,	240	},
    {	180,	0,	    480,	240,	540,	240,	600,	300,	120,	660,	900,	660,	780,	900,	180,	360,	360,	60,	    480,	660,	0,	300	},
    {	480,	480,	0,	    480,	360,	480,	480,	480,	600,	780,	1320,	480,	540,	480,	540,	180,	360,	420,	600,	480,	0,	720	},
    {	60,	    240,	480,	0,	    600,	60,	    660,	60,	    60,	    540,	780,	540,	840,	720,	360,	420,	120,	240,	660,	720,	0,	240	},
    {	540,	540,	360,	600,	0,	    540,	660,	540,	540,	360,	600,	60,	    420,	660,	600,	360,	480,	480,	720,	660,	0,	780	},
    {	60,	    240,	480,	60,	    540,	0,	    660,	60,	    120,	540,	780,	540,	840,	720,	360,	360,	60,	    240,	660,	720,	0,	240	},
    {	600,	600,	480,	660,	660,	660,	0,	    660,	540,	960,	1440,	720,	840,	300,	720,	360,	540,	600,	360,	240,	0,	840	},
    {	60,	    300,	480,	60,	    540,	60,	    660,	0,	    120,	540,	780,	540,	900,	720,	360,	420,	120,	240,	660,	720,	0,	180	},
    {	60,	    120,	600,	60,	    540,	120,	540,	120,	0,	    660,	900,	600,	720,	840,	240,	300,	180,	120,	540,	660,	0,	300	},
    {	600,	660,	780,	540,	360,	540,	960,	540,	660,	0,	    420,	300,	780,	840,	780,	540,	660,	780,	1020,	1020,	0,	600	},
    {	840,	900,	1320,	780,	600,	780,	1440,	780,	900,	420,	0,	    600,	1200,	1560,	1080,	1200,	900,	960,	1200,	1320,	0,	780	},
    {	600,	660,	480,	540,	60,	    540,	720,	540,	600,	300,	600,	0,	    540,	600,	660,	300,	420,	540,	840,	720,	0,	720	},
    {	780,	780,	540,	840,	420,	840,	840,	900,	720,	780,	1200,	540,	0,	    840,	720,	360,	480,	600,	960,	840,	0,	900	},
    {	780,	900,	480,	720,	660,	720,	300,	720,	840,	840,	1560,	600,	840,	0,	    960,	420,	600,	840,	780,	600,	0,	900	},
    {	360,	180,	540,	360,	600,	360,	720,	360,	240,	780,	1080,	660,	720,	960,	0,	    480,	540,	180,	420,	600,	0,	180	},
    {	360,	360,	180,	420,	360,	360,	360,	420,	300,	540,	1200,	300,	360,	420,	480,	0,	    240,	300,	600,	480,	0,	600	},
    {	180,	360,	360,	120,	480,	60,	    540,	120,	180,	660,	900,	420,	480,	600,	540,	240,	0,	    180,	600,	600,	0,	300	},
    {	180,	60,	    420,	240,	480,	240,	600,	240,	120,	780,	960,	540,	600,	840,	180,	300,	180,	0,	    360,	600,	0,	180	},
    {	600,	480,	600,	660,	720,	660,	360,	660,	540,	1020,	1200,	840,	960,	780,	420,	600,	600,	360,	0,	    240,	0,	480	},
    {	660,	660,	480,	720,	660,	720,	240,	720,	660,	1020,	1320,	720,	840,	600,	600,	480,	600,	600,	240,	0,	    0,	660	},
    {	0,	    0,	    0,	    0,	    0,	    0,	    0,	    0,	    0,	    0,	    0,	    0,	    0,	    0,	    0,	    0,	    0,	    0,	    0,	    0,	    0,	0	},
    {	240,	300,	720,	240,	780,	240,	840,	180,	300,	600,	780,	720,	900,	900,	180,	600,	300,	180,	480,	660,	0,	0	}
	};
	
	
	Map<String, Integer> nameIndexMap = new HashMap<String, Integer>();
	
	nameIndexMap.put("Centro Fotografia", 0);	
    nameIndexMap.put("Santa Anastasia", 1);
    nameIndexMap.put("Museo Storia", 2);
    nameIndexMap.put("Torre Lamberti", 3);
    nameIndexMap.put("Arena", 4);
    nameIndexMap.put("Palazzo della Ragione", 5);
    nameIndexMap.put("Giardino Giusti", 6);
    nameIndexMap.put("Sighseeing", 7);
    nameIndexMap.put("Museo Conte", 8);
    nameIndexMap.put("Castelvecchio", 9);
    nameIndexMap.put("San Zeno", 10);
    nameIndexMap.put("Museo Lapidario", 11);
    nameIndexMap.put("Tomba Giulietta", 12);
    nameIndexMap.put("Museo Radio", 13);
    nameIndexMap.put("Duomo", 14);
    nameIndexMap.put("San Fermo", 15);
    nameIndexMap.put("Casa Giulietta", 16);
    nameIndexMap.put("AMO", 17);
    nameIndexMap.put("Teatro Romano", 18);
    nameIndexMap.put("Museo Africano", 19);
    nameIndexMap.put("Verona Tour", 20);
    nameIndexMap.put("Museo Miniscalchi", 21);


	for (Map.Entry<Date, String> pair : entrances.entrySet()) 
	{
		if (i != 0 && entrance1.getDay() == pair.getKey().getDay() && entrance1.getMonth() == pair.getKey().getMonth() && entrance1.getYear() == pair.getKey().getYear())
		{
			timesMap.put(poi1, (((pair.getKey().getTime() - entrance1.getTime()) / 1000) - seconds_distance_matrix[nameIndexMap.get(poi1)][nameIndexMap.get(pair.getValue())]));
		}	
		
		poi1 = pair.getValue();
		entrance1 = pair.getKey(); 
		
		i++;
	}
	return timesMap;
$$
; 
